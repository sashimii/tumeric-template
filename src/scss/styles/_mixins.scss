
// Typographic Elements

// TM is short for Tumeric
// Spits out namespaced styles
@mixin tm($class-name) {
  .#{$namespace}__#{$class-name} {
      @content;
  }
}

@mixin px($pt_value) {
  font-size: $pt_value * 1.3333 + 0px;
}

@mixin pad-hero($attribute, $mobile, $tablet, $desktop) {
  #{$attribute}: $mobile;
  @include tablet-up {
    #{$attribute}: $tablet;
  }
  @include desktop-up {
    #{$attribute}: $desktop;
  }
}

@mixin pad-text($mobile, $tablet, $desktop) {
  @include tm('text-block') {
    @include tm('eyebrow-text') {
      margin: 0;
    }
    @include tm('eyebrow') {
      margin: 0 0 #{$mobile} 0;
    }
    @include tm('header') {
      // @include px(40);
      font-size: 45px;
      margin-bottom: 14px;
    }
    @include tm('subheader') {
      font-size: 20px;
      line-height: 1.2;
      margin-bottom: 26px;
    }
    @include tm('subcopy') {
      font-size: 16px;
      line-height: 1.19;
      margin-bottom: 31px;
    }
    @include tablet-up() {
      @include tm('eyebrow-text') {
        font-size: 20px;
        margin: 0;
      }
      @include tm('eyebrow') {
        margin-bottom: 19.8px;
      }
      @include tm('header') {
        font-size: 50px;
        line-height: 1;
        margin-bottom: (12px) / 2;
        &:first-child {
          font-size: 60px;
          line-height: 1;
          margin-bottom: (26px) / 2 ;
        }
        // margin: #{$tablet} 0 #{$tablet} 0;
      }
      @include tm('subheader') {
        font-size: 26px;
        line-height: 1.15;
        margin-bottom: (28px) / 2;
        // margin: #{$tablet} 0 #{$tablet} 0;
      }
      @include tm('subcopy') {
        font-size: 18px;
        line-height: 1.17;
        &:first-child {
          font-size: 18px;
          line-height: 1.17;
          margin-bottom: (36px) / 2 ;
        }
        // margin: #{$tablet} 0 #{$tablet + $tablet} 0;
      }
    }

    @include desktop-up() {
      @include tm('eyebrow-text') {
        font-size: 20px;
        margin: 0;
      }
      @include tm('eyebrow') {
        margin-bottom: 35px;
      }
      @include tm('header') {
        font-size: 60px;
        margin-bottom: (5px) / 2;
        &:first-child {
          font-size: 80px;
          margin-bottom: 11px;
        }
      }
      @include tm('subheader') {
        font-size: 32px;
        line-height: 1.12;
        margin-bottom: (32px) / 2;
      }
      @include tm('subcopy') {
        font-size: 18px;
        line-height: 1.17;
        margin-bottom: 41px;

        // font-size: (22pt/2);
        // margin: #{$desktop} 0 #{$desktop + $desktop} 0;
      }
    }
  }
}

@mixin subcopy-size($mobile, $tablet, $desktop) {
  @include tm('text-block') {
    @include tm('header') {
      font-size: 40pt;
    }

    @include tm('subcopy') {
      font-size: 16pt;
    }
    @include tablet-up() {
      @include tm('eyebrow') {
        font-size: (36pt / 3);
      }
      @include tm('header') {
        font-size: (120pt / 3);
      }
      @include tm('subcopy') {
        font-size: (28pt / 3);
      }
    }

    @include desktop-up() {
      @include tm('eyebrow-text') {
        font-size: (24pt/2);
      }
      @include tm('header') {
        font-size: (70pt/2);
      }

      @include tm('subcopy') {
        font-size: (22pt/2);
      }
    }
  }
}



@mixin text-container-widths($mobile, $tablet, $desktop) {
  width: $mobile;
  @include tablet-up {
    width: $tablet;
  }
  @include desktop-up {
    width: $desktop;
  }
}

// Handling Fill vs Stroke
@mixin cta($style) {
  &.#{$style} {
    @include tm('cta') {
      &-button {
        letter-spacing: 0 !important;
        @if $style == 'fill' {

          @content;
        } @else if $style == 'stroke' {
          @content;
        } @else if $style == 'none' {
          font-size: 18px;
          line-height: 1.11;
          padding: 0;
          @include tablet-up() {
            font-size: 20px;
            line-height: 1;
          }
          text-align: center;
          font-weight: 500;
          text-decoration: underline;
          text-transform: capitalize;
          @content;
        }
      }
    }
  }
}

@mixin aspect-ratio($name, $width, $height) {
  position: relative;
  &:before {
    display: block;
    content: "";
    width: 100%;
    padding-top: ($height / $width) * 100%;
  }
  > .#{$name}-content {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
  }
}

// Handling Evergreen Colours
@mixin cta-evergreen($colour) {

  @if $colour == "black" {
    @include cta('fill') {
      background-color: $black;
      color: $white;
    }
    @include cta('stroke') {
      border-color: $black;
      color: $black;
    }
    @include cta('none') {

      color: $black;
    }
  }
  @else if $colour == "white" {
    @include cta('fill') {
      background-color: $white;
      color: $black;
    }
    @include cta('stroke') {
      border-color: $white;
      color: $white;
    }
    @include cta('none') {

      color: $white;
    }
  }
  @else if $colour == "orange" {
    @include cta('fill') {
      background-color: $orange;
      color: $white;
    }
    @include cta('stroke') {
      border-color: $orange;
      color: $orange;
    }
    @include cta('none') {

      color: $orange;
    }
  }
    @else if $colour == "spring-grey" {
    @include cta('fill') {
      background-color: $spring_grey;
      color: white;
    }
    @include cta('stroke') {
      border-color: $spring_grey;
      color: $spring_grey;
    }
    @include cta('none') {
      color: $spring_grey;
    }
  }
    @else if $colour == "newborn" {
    @include cta('fill') {
      background-color: $newborn;
      color: white;
    }
    @include cta('stroke') {
      border-color: $newborn;
      color: $newborn;
    }
    @include cta('none') {
      color: $newborn;
    }

  }
  @else {
    @include cta('fill') {
      background-color: $white;
      color: $orange;
    }
    @include cta('stroke') {
      border-color: $white;
      color: $white;
    }
    @include cta('none') {

      color: $white;
    }
  }

}

// Handling Seasonal Colours
@mixin cta-seasonal($colour) {

  @if $colour == "navy" {
    @include cta('fill') {
      background-color: $navy;
      color: $white;
    }
    @include cta('stroke') {
      border-color: $navy;
      color: $navy;
    }
  }
  @else if $colour == "maroon" {
    @include cta('fill') {
      background-color: $maroon;
      color: $white;
    }
    @include cta('stroke') {
      border-color: $maroon;
      color: $maroon;
    }
  }
  @else if $colour == "camel" {
    @include cta('fill') {
      background-color: $camel;
      color: $navy;
    }
    @include cta('stroke') {
      border-color: $camel;
      color: $camel;
    }
  }
  @else if $colour == "green" {
    @include cta('fill') {
      background-color: $green;
      color: $white;
    }
    @include cta('stroke') {
      border-color: $green;
      color: $green;
    }
    @include cta('none') {

      color: $green;
    }
  }
  @else if $colour == "green-white" {
    @include cta('fill') {
      background-color: $white;
      color: $green;
    }
    @include cta('stroke') {
      border-color: $white;
      color: $white;
    }
    @include cta('none') {

      color: $green;
    }
  }
  @else if $colour == "red" {
    @include cta('fill') {
      background-color: $red;
      color: $white;
    }
    @include cta('stroke') {
      border-color: $red;
      color: $red;
    }
    @include cta('none') {

      color: $red;
    }
  }
  @else if $colour == "red-white" {
    @include cta('fill') {
      background-color: $white;
      color: $red;
    }
    @include cta('stroke') {
      border-color: $white;
      color: $white;
    }
    @include cta('none') {

      color: $red;
    }
  }
  @else {
    @include cta('fill') {
      background-color: $white;
      color: $navy;
    }
    @include cta('stroke') {
      border-color: $white;
      color: $white;
    }
  }

}
